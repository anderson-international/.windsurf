# Cognitive Load (cog-load) Scripts

## What Are Cognitive Load Scripts?

These scripts measure and optimize document readability. They use cognitive science research to keep documentation easy to understand. They prevent "cognitive load creep" - when documents gradually become harder to read over time.

## Understanding Cognitive Load Score (CLS)

The Cognitive Load Score measures mental effort needed to process a document. It combines three factors:

- **Readability (40%)**: Text complexity and sentence structure
- **Lexical Complexity (30%)**: Vocabulary difficulty and technical terms  
- **Topic Coherence (30%)**: Information organization and logical flow

## Target Score Ranges

Research shows optimal ranges:

- **55-60 CLS**: Optimal range. 8th-9th grade level. Easy to understand.
- **Under 55**: Too simple. May lose important information.
- **Over 60**: Getting harder to understand.
- **Over 65**: High cognitive burden. Much harder to process.

## Core Scripts

### Measuring Cognitive Load

**`cog-load-measure.js`** - Measures cognitive load for documents

```bash
# Single document
cmd /c node docs/ai/maintenance/scripts/cog-load-measure.js --file docs/example.md

# All documents  
cmd /c node docs/ai/maintenance/scripts/cog-load-measure.js --all
```

Shows detailed breakdown of readability, lexical complexity, and coherence scores.

### Getting Improvement Suggestions

**`cog-load-improve.js`** - Provides specific recommendations to reduce cognitive load

```bash
# Analyze specific document
cmd /c node docs/ai/maintenance/scripts/cog-load-improve.js --file docs/example.md

# Find all high-load documents
cmd /c node docs/ai/maintenance/scripts/cog-load-improve.js --high-load
```

Gives actionable recommendations. Targets the biggest cognitive load problems.

### Automated Optimization

**`cog-load-optimize.js`** - Runs the complete optimization workflow with human oversight

```bash
cmd /c node docs/ai/maintenance/scripts/cog-load-optimize.js --file docs/example.md
```

This script:
1. Measures current cognitive load
2. Suggests improvements step by step  
3. Asks for approval before making changes
4. Stops when further changes would lose important information
5. Creates a comprehensive report

### Quality Gate Validation

**`cog-load-validate.js`** - Checks that documents haven't gotten too complex

```bash
# Check single document
cmd /c node docs/ai/maintenance/scripts/cog-load-validate.js --file docs/example.md

# Check all documents
cmd /c node docs/ai/maintenance/scripts/cog-load-validate.js --all
```

Exit codes:
- `0`: All good
- `1`: Some documents failed (got too complex)  
- `2`: System error

## Graph Management Scripts

### Maintaining Scores

**`cog-load-graph-maintainer.js`** - Updates and maintains cognitive load scores in the document graph

```bash
# Update all cognitive load scores
cmd /c node docs/ai/maintenance/scripts/cog-load-graph-maintainer.js --update-cog-load

# Check graph consistency
cmd /c node docs/ai/maintenance/scripts/cog-load-graph-maintainer.js --validate

# Fix graph problems
cmd /c node docs/ai/maintenance/scripts/cog-load-graph-maintainer.js --repair
```

### System Analytics

**`cog-load-graph-analytics.js`** - Shows comprehensive reports on cognitive load across all documentation

```bash
# Full analytics report
cmd /c node docs/ai/maintenance/scripts/cog-load-graph-analytics.js --report

# Health check only
cmd /c node docs/ai/maintenance/scripts/cog-load-graph-analytics.js --health

# Cognitive load analysis only
cmd /c node docs/ai/maintenance/scripts/cog-load-graph-analytics.js --cog-load
```

## How to Use These Scripts

### Regular Maintenance Workflow

1. **Check Current State**: Run `cog-load-measure.js --all` to see all scores
2. **Find Problems**: Run `cog-load-graph-analytics.js --report` to find high-load documents  
3. **Optimize**: Use `cog-load-optimize.js` on documents with CLS over 65
4. **Validate**: Run `cog-load-validate.js` to confirm improvements
5. **Update Records**: Run `cog-load-graph-maintainer.js --update-cog-load`

### Quality Gate in Build Process

Add to CI/CD pipeline:

```bash
cmd /c node docs/ai/maintenance/scripts/cog-load-validate.js --all
if %ERRORLEVEL% NEQ 0 (
    echo "‚ùå Documents became too complex"
    exit /b 1
)
