{
  "tasks": [
    {
      "id": "6e690cf2-5485-4f7c-bec8-baf6e8df4c81",
      "name": "Setup Next.js 14 project with TypeScript and core dependencies",
      "description": "Initialize a new Next.js 14 project with App Router, TypeScript configuration, and essential dependencies including Prisma, Auth.js, and development tools following the project standards",
      "notes": "Use Next.js 14 with App Router, follow the architectural guidelines for file structure",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-06-07T15:20:38.321Z",
      "updatedAt": "2025-06-07T15:20:38.321Z",
      "relatedFiles": [
        {
          "path": "package.json",
          "type": "CREATE",
          "description": "Project dependencies and scripts"
        },
        {
          "path": "tsconfig.json",
          "type": "CREATE",
          "description": "TypeScript configuration"
        },
        {
          "path": ".env.example",
          "type": "CREATE",
          "description": "Environment variables template"
        },
        {
          "path": "next.config.js",
          "type": "CREATE",
          "description": "Next.js configuration"
        }
      ],
      "implementationGuide": "1. Create Next.js project with TypeScript\n2. Install dependencies: @prisma/client, prisma, @auth/prisma-adapter, next-auth@beta\n3. Configure TypeScript with strict mode\n4. Setup ESLint and Prettier per project standards\n5. Create folder structure: src/app, components, lib, styles\n6. Configure environment variables for database and auth",
      "verificationCriteria": "Project runs with npm run dev, TypeScript compiles without errors, folder structure matches architectural guidelines",
      "analysisResult": "Build a Next.js 14 CRUD application for managing tobacco product specifications with NeonDB integration, authentication, role-based access control, and modern UI/UX following the project's architectural guidelines for simplicity and maintainability"
    },
    {
      "id": "222a6252-3e48-4333-ac72-fec829d27761",
      "name": "Configure Prisma ORM with NeonDB schema",
      "description": "Set up Prisma with the existing NeonDB schema, generate types, and create database connection utilities",
      "notes": "Ensure all relationships are properly defined, use the existing db-schema.txt as reference",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "6e690cf2-5485-4f7c-bec8-baf6e8df4c81"
        }
      ],
      "createdAt": "2025-06-07T15:20:38.321Z",
      "updatedAt": "2025-06-07T15:20:38.321Z",
      "relatedFiles": [
        {
          "path": "prisma/schema.prisma",
          "type": "CREATE",
          "description": "Complete Prisma schema definition"
        },
        {
          "path": "src/lib/prisma/client.ts",
          "type": "CREATE",
          "description": "Prisma client singleton"
        },
        {
          "path": "db-schema.txt",
          "type": "REFERENCE",
          "description": "Existing database schema reference"
        }
      ],
      "implementationGuide": "1. Initialize Prisma with PostgreSQL provider\n2. Convert existing schema to Prisma schema format\n3. Define all models: users, specifications, enum tables, junction tables\n4. Configure database connection with NeonDB\n5. Generate Prisma client\n6. Create singleton Prisma client instance in lib/prisma/client.ts",
      "verificationCriteria": "Prisma generates without errors, can connect to database, all models have correct types and relationships",
      "analysisResult": "Build a Next.js 14 CRUD application for managing tobacco product specifications with NeonDB integration, authentication, role-based access control, and modern UI/UX following the project's architectural guidelines for simplicity and maintainability"
    },
    {
      "id": "a13ca51e-7163-408f-b352-2de5800a3072",
      "name": "Implement Auth.js authentication with magic links",
      "description": "Set up Auth.js v5 (NextAuth) with email magic link authentication, session management, and development mode user selection",
      "notes": "Follow the authentication strategy: production uses magic links, development allows user selection",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "222a6252-3e48-4333-ac72-fec829d27761"
        }
      ],
      "createdAt": "2025-06-07T15:20:38.321Z",
      "updatedAt": "2025-06-07T15:20:38.321Z",
      "relatedFiles": [
        {
          "path": "src/lib/auth/config.ts",
          "type": "CREATE",
          "description": "Auth.js configuration"
        },
        {
          "path": "src/app/api/auth/[...nextauth]/route.ts",
          "type": "CREATE",
          "description": "Auth API routes"
        },
        {
          "path": "src/lib/auth/context.tsx",
          "type": "CREATE",
          "description": "Auth context provider"
        },
        {
          "path": "src/app/auth/signin/page.tsx",
          "type": "CREATE",
          "description": "Sign in page"
        }
      ],
      "implementationGuide": "1. Configure Auth.js with email provider for magic links\n2. Set up Prisma adapter for session storage\n3. Create auth configuration in lib/auth/config.ts\n4. Implement development mode with user selection\n5. Create authentication API routes\n6. Add AuthProvider context wrapper\n7. Create useAuth hook for components",
      "verificationCriteria": "Can send magic link emails, sessions persist in database, development mode shows user selection, protected routes redirect unauthenticated users",
      "analysisResult": "Build a Next.js 14 CRUD application for managing tobacco product specifications with NeonDB integration, authentication, role-based access control, and modern UI/UX following the project's architectural guidelines for simplicity and maintainability"
    },
    {
      "id": "21c8841f-e7a5-491f-8af6-f0cafdc1e3ae",
      "name": "Create base UI components and layout structure",
      "description": "Build foundational UI components and layout following the project's CSS Modules strategy and component organization guidelines",
      "notes": "Keep components under 150 lines, use CSS Modules exclusively, follow the component hierarchy from architectural guidelines",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "a13ca51e-7163-408f-b352-2de5800a3072"
        }
      ],
      "createdAt": "2025-06-07T15:20:38.321Z",
      "updatedAt": "2025-06-07T15:20:38.321Z",
      "relatedFiles": [
        {
          "path": "src/components/layout/AppLayout.tsx",
          "type": "CREATE",
          "description": "Main application layout"
        },
        {
          "path": "src/components/common/Button.tsx",
          "type": "CREATE",
          "description": "Reusable button component"
        },
        {
          "path": "src/components/common/DataTable.tsx",
          "type": "CREATE",
          "description": "Generic data table component"
        },
        {
          "path": "src/styles/",
          "type": "CREATE",
          "description": "CSS Modules for components"
        }
      ],
      "implementationGuide": "1. Create AppLayout component with header, sidebar, main content area\n2. Build common components: Button, Card, Modal, Form elements\n3. Implement data table component with sorting and pagination\n4. Create loading states and error boundaries\n5. Set up CSS Modules for each component\n6. Implement responsive design patterns",
      "verificationCriteria": "All components render correctly, CSS Modules work, responsive on mobile/tablet, consistent visual design",
      "analysisResult": "Build a Next.js 14 CRUD application for managing tobacco product specifications with NeonDB integration, authentication, role-based access control, and modern UI/UX following the project's architectural guidelines for simplicity and maintainability"
    },
    {
      "id": "5251579f-049d-424f-8160-3c7bb644508d",
      "name": "Build specifications CRUD functionality",
      "description": "Implement complete CRUD operations for specifications including API routes, UI components, and junction table management",
      "notes": "This is the main entity, ensure all relationships are properly handled through junction tables",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "21c8841f-e7a5-491f-8af6-f0cafdc1e3ae"
        }
      ],
      "createdAt": "2025-06-07T15:20:38.321Z",
      "updatedAt": "2025-06-07T15:20:38.321Z",
      "relatedFiles": [
        {
          "path": "src/app/api/specifications/",
          "type": "CREATE",
          "description": "Specifications API routes"
        },
        {
          "path": "src/components/specifications/",
          "type": "CREATE",
          "description": "Specification components"
        },
        {
          "path": "src/app/specifications/",
          "type": "CREATE",
          "description": "Specifications pages"
        },
        {
          "path": "src/lib/validations/specifications.ts",
          "type": "CREATE",
          "description": "Zod validation schemas"
        }
      ],
      "implementationGuide": "1. Create API routes for specifications CRUD\n2. Build SpecificationList with filtering and pagination\n3. Create SpecificationForm with multi-select for junction tables\n4. Implement detail view with all relationships\n5. Add validation using Zod schemas\n6. Handle junction tables (cures, tasting notes, tobacco types)\n7. Implement role-based permissions",
      "verificationCriteria": "Can create, read, update, delete specifications; junction tables update correctly; validation works on client and server; proper error handling",
      "analysisResult": "Build a Next.js 14 CRUD application for managing tobacco product specifications with NeonDB integration, authentication, role-based access control, and modern UI/UX following the project's architectural guidelines for simplicity and maintainability"
    },
    {
      "id": "aaac6512-2fc2-459e-a2e2-ea60cbce19d1",
      "name": "Implement enum tables management",
      "description": "Create generic CRUD components for all 10 enum tables with validation to prevent deletion of referenced values",
      "notes": "Enum tables: cures, experience_levels, grinds, moisture_levels, nicotine_levels, product_brands, product_types, snuff_types, tasting_notes, tobacco_types",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "5251579f-049d-424f-8160-3c7bb644508d"
        }
      ],
      "createdAt": "2025-06-07T15:20:38.321Z",
      "updatedAt": "2025-06-07T15:20:38.321Z",
      "relatedFiles": [
        {
          "path": "src/app/api/enums/[type]/",
          "type": "CREATE",
          "description": "Dynamic enum API routes"
        },
        {
          "path": "src/components/enums/EnumManager.tsx",
          "type": "CREATE",
          "description": "Generic enum management component"
        },
        {
          "path": "src/app/admin/enums/",
          "type": "CREATE",
          "description": "Enum management pages"
        }
      ],
      "implementationGuide": "1. Create generic EnumManager component\n2. Build API routes with dynamic routing for enum types\n3. Implement referential integrity checks before deletion\n4. Add bulk import/export functionality\n5. Create admin-only access control\n6. Build UI for each enum type management",
      "verificationCriteria": "All enum tables have CRUD operations; cannot delete referenced values; bulk operations work; proper access control",
      "analysisResult": "Build a Next.js 14 CRUD application for managing tobacco product specifications with NeonDB integration, authentication, role-based access control, and modern UI/UX following the project's architectural guidelines for simplicity and maintainability"
    },
    {
      "id": "b3a56186-e0ed-4a32-8b7a-e32dd32ad7e7",
      "name": "Build user management and role-based access control",
      "description": "Implement user CRUD operations with role management and enforce role-based permissions throughout the application",
      "notes": "Roles from users table should control access to different features, especially admin functions",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "aaac6512-2fc2-459e-a2e2-ea60cbce19d1"
        }
      ],
      "createdAt": "2025-06-07T15:20:38.321Z",
      "updatedAt": "2025-06-07T15:20:38.321Z",
      "relatedFiles": [
        {
          "path": "src/app/api/users/",
          "type": "CREATE",
          "description": "User management API routes"
        },
        {
          "path": "src/middleware.ts",
          "type": "CREATE",
          "description": "Auth and role checking middleware"
        },
        {
          "path": "src/app/admin/users/",
          "type": "CREATE",
          "description": "User management pages"
        }
      ],
      "implementationGuide": "1. Create user management API routes (admin only)\n2. Build UserList and UserForm components\n3. Implement role assignment UI\n4. Create middleware for route protection\n5. Add role checks to all API endpoints\n6. Build activity tracking dashboard",
      "verificationCriteria": "Admin can manage users and roles; role-based access works across all routes; non-admin users have limited access; activity is tracked",
      "analysisResult": "Build a Next.js 14 CRUD application for managing tobacco product specifications with NeonDB integration, authentication, role-based access control, and modern UI/UX following the project's architectural guidelines for simplicity and maintainability"
    },
    {
      "id": "59d64e6f-e8c1-477e-8bd8-c9a47a934c90",
      "name": "Implement search, filtering, and data export features",
      "description": "Add advanced search and filtering capabilities for specifications with saved filters and data export functionality",
      "notes": "Ensure filters work efficiently with large datasets using proper Prisma queries",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "b3a56186-e0ed-4a32-8b7a-e32dd32ad7e7"
        }
      ],
      "createdAt": "2025-06-07T15:20:38.321Z",
      "updatedAt": "2025-06-07T15:20:38.321Z",
      "relatedFiles": [
        {
          "path": "src/components/common/AdvancedFilter.tsx",
          "type": "CREATE",
          "description": "Advanced filtering component"
        },
        {
          "path": "src/components/common/Search.tsx",
          "type": "TO_MODIFY",
          "description": "Enhanced search component"
        },
        {
          "path": "src/lib/utils/export.ts",
          "type": "CREATE",
          "description": "Data export utilities"
        }
      ],
      "implementationGuide": "1. Build advanced filter component with all enum options\n2. Implement full-text search on specifications\n3. Create saved filter presets functionality\n4. Add date range filtering\n5. Build export to CSV/JSON functionality\n6. Implement filter state management\n7. Add keyboard shortcuts for power users",
      "verificationCriteria": "Search returns relevant results; filters work individually and combined; saved filters persist; export produces valid files; keyboard shortcuts function",
      "analysisResult": "Build a Next.js 14 CRUD application for managing tobacco product specifications with NeonDB integration, authentication, role-based access control, and modern UI/UX following the project's architectural guidelines for simplicity and maintainability"
    }
  ]
}