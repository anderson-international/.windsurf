# NeonDB Schema Documentation
# Branch: br-tiny-lab-abtu8c62
# Project: royal-heart-02123567 (spec-builder)
# Last Updated: 2025-06-07

## Overview
This database supports a nasal snuff specification management system with:
- Multi-reviewer specifications for products
- Enum-based categorization
- Junction tables for many-to-many relationships
- Draft/published workflow
- Integration with Shopify for product data

## Core Tables

### specifications
The main table storing product specifications from reviewers.

```sql
CREATE TABLE specifications (
    id                  INTEGER NOT NULL DEFAULT nextval('specifications_id_seq'),
    shopify_handle      VARCHAR(255) NOT NULL,       -- Links to Shopify product
    product_type_id     INTEGER NOT NULL,            -- FK to enum_product_types
    is_fermented        BOOLEAN DEFAULT false,
    is_oral_tobacco     BOOLEAN DEFAULT false,
    is_artisan          BOOLEAN DEFAULT false,
    grind_id            INTEGER NOT NULL,            -- FK to enum_grinds
    nicotine_level_id   INTEGER NOT NULL,            -- FK to enum_nicotine_levels
    experience_level_id INTEGER NOT NULL,            -- FK to enum_experience_levels
    review              TEXT,                        -- Free text review
    star_rating         INTEGER DEFAULT 0,
    rating_boost        INTEGER DEFAULT 0,
    created_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at          TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    user_id             UUID NOT NULL,               -- FK to users
    moisture_level_id   INTEGER NOT NULL,            -- FK to enum_moisture_levels
    product_brand_id    INTEGER NOT NULL,            -- FK to enum_product_brands
    submission_id       VARCHAR(20),                 -- Legacy JotForm reference
    status_id           INTEGER NOT NULL DEFAULT 1,  -- FK to enum_specification_statuses (1=draft)
    
    PRIMARY KEY (id),
    UNIQUE (submission_id),
    FOREIGN KEY (product_type_id) REFERENCES enum_product_types(id),
    FOREIGN KEY (grind_id) REFERENCES enum_grinds(id),
    FOREIGN KEY (nicotine_level_id) REFERENCES enum_nicotine_levels(id),
    FOREIGN KEY (experience_level_id) REFERENCES enum_experience_levels(id),
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (moisture_level_id) REFERENCES enum_moisture_levels(id),
    FOREIGN KEY (product_brand_id) REFERENCES enum_product_brands(id),
    FOREIGN KEY (status_id) REFERENCES enum_specification_statuses(id)
);

**IMPORTANT NOTE**: There is currently no `is_published` field. Draft functionality will need to be implemented either by:
1. Adding an `is_published` field via migration
2. Using a separate drafts table
3. Using field completeness to determine draft status
4. Adding a status enum field
```

Key Indexes:
- idx_specifications_shopify_handle
- idx_specifications_experience_level_id
- idx_specifications_grind_id
- idx_specifications_nicotine_level_id
- idx_specifications_product_brand_id
- idx_specifications_product_type_id

### users
Stores reviewer accounts with role-based access.

```sql
CREATE TABLE users (
    id           UUID NOT NULL DEFAULT gen_random_uuid(),
    email        TEXT NOT NULL,
    name         TEXT,
    role         TEXT NOT NULL CHECK (role IN ('Admin', 'Reviewer')),
    created_at   TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    slack_userid VARCHAR(30),      -- For Slack integration
    jotform_name VARCHAR(100),     -- Legacy mapping
    
    PRIMARY KEY (id),
    UNIQUE (email)
);
```

## Junction Tables

### spec_tasting_notes
Links specifications to multiple tasting notes.

```sql
CREATE TABLE spec_tasting_notes (
    specification_id     INTEGER NOT NULL,
    enum_tasting_note_id INTEGER NOT NULL,
    
    PRIMARY KEY (specification_id, enum_tasting_note_id),
    FOREIGN KEY (specification_id) REFERENCES specifications(id) ON DELETE CASCADE,
    FOREIGN KEY (enum_tasting_note_id) REFERENCES enum_tasting_notes(id) ON DELETE CASCADE
);
```

### spec_cures
Links specifications to multiple cure types.

```sql
CREATE TABLE spec_cures (
    specification_id INTEGER NOT NULL,
    enum_cure_id     INTEGER NOT NULL,
    
    PRIMARY KEY (specification_id, enum_cure_id),
    FOREIGN KEY (specification_id) REFERENCES specifications(id) ON DELETE CASCADE,
    FOREIGN KEY (enum_cure_id) REFERENCES enum_cures(id) ON DELETE CASCADE
);
```

### spec_tobacco_types
Links specifications to multiple tobacco types.

```sql
CREATE TABLE spec_tobacco_types (
    specification_id     INTEGER NOT NULL,
    enum_tobacco_type_id INTEGER NOT NULL,
    
    PRIMARY KEY (specification_id, enum_tobacco_type_id),
    FOREIGN KEY (specification_id) REFERENCES specifications(id) ON DELETE CASCADE,
    FOREIGN KEY (enum_tobacco_type_id) REFERENCES enum_tobacco_types(id) ON DELETE CASCADE
);
```

## Enum Tables
All enum tables follow the same structure:

```sql
CREATE TABLE enum_[name] (
    id         INTEGER NOT NULL DEFAULT nextval('enum_[name]_id_seq'),
    name       VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    PRIMARY KEY (id),
    UNIQUE (name)
);
```

### List of Enum Tables:
1. **enum_cures** - Tobacco curing methods
2. **enum_experience_levels** - Reviewer experience levels
3. **enum_grinds** - Snuff grind textures
4. **enum_moisture_levels** - Product moisture levels
5. **enum_nicotine_levels** - Nicotine strength levels
6. **enum_product_brands** - Product brand names
7. **enum_product_types** - Types of products (e.g., snuff types)
8. **enum_snuff_types** - Specific snuff categorizations
9. **enum_tasting_notes** - Flavor/aroma descriptors
10. **enum_tobacco_types** - Types of tobacco used
11. **enum_specification_statuses** - Workflow states (draft, published, needs_revision, under_review)

## Temporary Tables (To be removed post-migration)

### jotform
Stores raw JotForm submissions during migration period.

### jotform_shopify
Maps JotForm submissions to Shopify products.

### transform_log
Logs data transformation operations during migration.

## Key Relationships

1. **One-to-Many:**
   - users → specifications (one reviewer, many specs)
   - enum_* → specifications (each enum referenced by many specs)

2. **Many-to-Many (via junction tables):**
   - specifications ↔ enum_tasting_notes
   - specifications ↔ enum_cures
   - specifications ↔ enum_tobacco_types

3. **External Integration:**
   - specifications.shopify_handle → Shopify product catalog

## Business Rules

1. **Required Fields in Specifications:**
   - All enum references (product_type, grind, nicotine_level, etc.)
   - user_id (reviewer)
   - shopify_handle (product reference)

2. **Optional Multi-Select Fields:**
   - Tasting notes (recommended at least 1)
   - Cures (specialized knowledge)
   - Tobacco types (specialized knowledge)

3. **Draft/Published Workflow:**
   - **IMPLEMENTED via status_id field**:
     - status_id = 1: Draft (editable by owner)
     - status_id = 2: Published (read-only for reviewer, editable by admin)
     - status_id = 3: Needs revision (flagged for improvement)
     - status_id = 4: Under review (awaiting admin approval)

4. **User Roles:**
   - Admin: Full access to all data
   - Reviewer: Create/edit own specs, view others

## Performance Considerations

1. **Indexed Fields:**
   - All foreign keys
   - shopify_handle (for product lookups)
   - email in users table

2. **Table Sizes (Current):**
   - specifications: ~200KB
   - spec_tasting_notes: 320KB (largest junction table)
   - Most enum tables: <50KB each
